<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--指定特定数据库的jdbc驱动jar包的位置  这里的路径是鄙人的MySQL连接驱动路径-->
    <!--<classPathEntry location="D:/lutengfeiDoc/mysql-connector-java-5.1.34.jar" />-->
    <!--
		1.引入属性文件:配置数据库连接信息
	-->
    <properties resource="application.properties" />

    <context id="mysql" targetRuntime="MyBatis3Simple">

        <!-- 使用mybatis的通用mapper插件  -->
        <plugin type="${mapper.plugin}">
            <property name="mappers" value="${mapper.Mapper}" />
        </plugin>

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- 数据库连接的信息：驱动类，连接地址，用户名，密码 -->
        <jdbcConnection driverClass="${jdbc.driverClassName}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>
        <!-- 默认为false，把jdbc decimal 和 numeric 类型解析为integer,为true时把 把jdbc decimal 和
21      numeric 类型解析为java.math.bigdecimal-->
        <javaTypeResolver >
            <property name="forceBigDecimals" value="true" />
        </javaTypeResolver>
        <!-- 生成po类的位置 -->
        <javaModelGenerator targetPackage="com.huawei.server.mos.service.media.model" targetProject="./src/main/java">
            <!-- enablesubpackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
            <!-- 从数据库返回的值清理前后的空格 -->
            <property name="trimStrings" value="true" />
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--mapper映射文件 生成的位置-->
        <sqlMapGenerator targetPackage="mapper"  targetProject="./src/main/resources">
            <!-- enablesubpackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
               type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
               type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
               type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
               enablesubpackages:是否让schema作为包的后缀
       -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.huawei.server.mos.service.media.mapper"  targetProject="./src/main/java">
            <!-- enablesubpackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>

        <!--数据库表名和要生成的实体类名-->
        <table tableName="t_test" domainObjectName="Test" >
            <!--如果该属性设置为false(或未指定)，那么MBG将尝试对列名进行驼峰处理-->
            <property name="useActualColumnNames" value="false"/>
            <!--generatedKey:不是必须要配置的，但是大多数表还是需要配置自增id-->
            <generatedKey column="id" sqlStatement="Mysql" identity="false" />
            <!-- 列DATE_FIELD将映射到一个名为startDate的属性。这将覆盖默认属性，在本例中是DATE_FIELD，
              如果useActualColumnNames属性被设置为false，则覆盖dateField。-->
            <columnOverride column="DATE_FIELD" property="startDate" />
            <!--列FRED将被忽略。没有SQL会列出该字段，也不会生成Java属性。-->
            <ignoreColumn column="FRED" />
            <!--列LONG_VARCHAR_FIELD将被视为VARCHAR字段，而与实际数据类型无关。-->
            <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />
        </table>

    </context>
</generatorConfiguration>